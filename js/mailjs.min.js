class Mailjs{constructor(){this.api_url="https://api.mail.tm"}async register(t,s){try{const e=await fetch(`${this.api_url}/accounts`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({address:t,password:s})});if(!e.ok)throw await e.json();return await e.json()}catch(t){throw t}}async login(t,s){try{const e=await fetch(`${this.api_url}/token`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({address:t,password:s})});if(!e.ok)throw await e.json();return await e.json()}catch(t){throw t}}async getMe(t){try{const s=await fetch(`${this.api_url}/me`,{method:"GET",headers:{Authorization:`Bearer ${t}`}});if(!s.ok)throw await s.json();return await s.json()}catch(t){throw t}}async getDomains(){try{const t=await fetch(`${this.api_url}/domains`);if(!t.ok)throw await t.json();return await t.json()}catch(t){throw t}}async getMessages(t,s=1){try{const e=await fetch(`${this.api_url}/messages?page=${s}`,{headers:{Authorization:`Bearer ${t}`}});if(!e.ok)throw await e.json();return await e.json()}catch(t){throw t}}async getMessage(t,s){try{const e=await fetch(`${this.api_url}/messages/${s}`,{headers:{Authorization:`Bearer ${t}`}});if(!e.ok)throw await e.json();return await e.json()}catch(t){throw t}}async deleteMessage(t,s){try{const e=await fetch(`${this.api_url}/messages/${s}`,{method:"DELETE",headers:{Authorization:`Bearer ${t}`}});if(!e.ok)throw await e.json();return!0}catch(t){throw t}}async deleteAllMessages(t){try{const s=await fetch(`${this.api_url}/messages`,{method:"DELETE",headers:{Authorization:`Bearer ${t}`}});if(!s.ok)throw await s.json();return!0}catch(t){throw t}}async markAsRead(t,s){try{const e=await fetch(`${this.api_url}/messages/${s}`,{method:"PATCH",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/merge-patch+json"},body:JSON.stringify({seen:!0})});if(!e.ok)throw await e.json();return await e.json()}catch(t){throw t}}async getSource(t,s){try{const e=await fetch(`${this.api_url}/sources/${s}`,{headers:{Authorization:`Bearer ${t}`}});if(!e.ok)throw await e.json();return await e.json()}catch(t){throw t}}async createOneAccount(){try{const t=await this.getDomains(),s=t[Math.floor(Math.random()*t.length)],e=Math.random().toString(36).substring(2),a=Math.random().toString(36).substring(2),r=e+"@"+s.domain,n=await this.register(r,a),i=await this.login(r,a);return{address:r,password:a,account:n,token:i}}catch(t){throw t}}};
